{"version":3,"sources":["services/contentstorage.ts"],"names":[],"mappings":"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","file":"services/contentstorage.js","sourcesContent":["/**\r\n * News content storage service\r\n * Implemented using singleton NodeJS pattern\r\n*/\r\n\r\nimport * as si from '../shared/interfaces';\r\n\r\nclass ContentStorage {\r\n    private articleStorage = new Map<string, si.IArticleContainer>();\r\n    private urlToUuidMap = new Map<string, string>();\r\n    private enclosureStorage = new Map<string, Buffer>();\r\n    private logoStorage = new Map<string, Buffer>();\r\n    private callbacksQueue = new Map<string, ((data: Buffer) => void)[]>();\r\n\r\n    clear(): void {\r\n        this.articleStorage.clear();\r\n        this.urlToUuidMap.clear();\r\n        this.enclosureStorage.clear();\r\n        this.logoStorage.clear();\r\n        this.callbacksQueue.clear();\r\n    }\r\n    saveArticle(article: si.IArticleContainer): boolean {\r\n        this.articleStorage.set(article.uuid, article);\r\n        this.urlToUuidMap.set(article.header.link, article.uuid);\r\n        return true;\r\n    }\r\n\r\n    saveEnclosure(uuid: string, enclosure: Buffer): void {\r\n        this.enclosureStorage.set(uuid, enclosure);\r\n        let article = this.articleStorage.get(uuid);\r\n        if (article) {\r\n            article.header.hasEnclosure = true;\r\n        }\r\n        let queue = this.callbacksQueue.get(uuid);\r\n        if (queue) {\r\n            let cb: (data: Buffer) => void;\r\n            cb = queue.pop();\r\n            while (cb) {\r\n                cb(enclosure);\r\n                cb = queue.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    saveLogo(sourceName: string, logo: Buffer): void {\r\n        this.logoStorage.set(sourceName, logo);\r\n        let queue = this.callbacksQueue.get(sourceName);\r\n        if (queue) {\r\n            let cb: (data: Buffer) => void;\r\n            cb = queue.pop();\r\n            while (cb) {\r\n                cb(logo);\r\n                cb = queue.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    getArticleByUuid(uuid: string): si.IArticleContainer {\r\n        if (this.articleStorage.has(uuid)) {\r\n            return this.articleStorage.get(uuid);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getArticlesBySource(source: si.IRSSSource): si.IArticleContainer[] {\r\n        let articles: si.IArticleContainer[] = [];\r\n        this.articleStorage.forEach((article) => {\r\n            if (article.header.source === source.name) {\r\n                articles.push(article);\r\n            }\r\n        });\r\n        return articles;\r\n    }\r\n\r\n    getArticleByUrl(url: string): si.IArticleContainer {\r\n        let uuid = this.urlToUuidMap.get(url);\r\n        if (uuid) {\r\n            this.articleStorage.get(uuid);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getEnclosureByUuid(uuid: string, callback: (data: Buffer) => void): void {\r\n        if (this.enclosureStorage.has(uuid)) {\r\n            let pic = this.enclosureStorage.get(uuid);\r\n            callback(pic);\r\n        } else {\r\n            let queue = this.callbacksQueue.get(uuid) || [];\r\n            queue.push(callback);\r\n            this.callbacksQueue.set(uuid, queue);\r\n        }\r\n    }\r\n\r\n    getLogo(sourceName: string, callback: (data: Buffer) => void): void {\r\n        if (this.logoStorage.has(sourceName)) {\r\n            let logo = this.logoStorage.get(sourceName);\r\n            callback(logo);\r\n        } else {\r\n            let queue = this.callbacksQueue.get(sourceName) || [];\r\n            queue.push(callback);\r\n            this.callbacksQueue.set(sourceName, queue);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IContentStorageInstance {\r\n    instance: {\r\n        contentStorage: ContentStorage;\r\n    };\r\n}\r\n\r\nconst CONTENT_STORAGE = Symbol.for('ContentStorage');\r\n\r\nlet globalSymbols = Object.getOwnPropertySymbols(global);\r\nlet hasContentStorage = (globalSymbols.indexOf(CONTENT_STORAGE) > -1);\r\n\r\nif (!hasContentStorage) {\r\n    global[CONTENT_STORAGE] = {\r\n        contentStorage: new ContentStorage()\r\n    };\r\n}\r\n\r\nlet singleton: IContentStorageInstance = {\r\n    instance: {\r\n        contentStorage: null\r\n    }\r\n};\r\n\r\nlet descriptor: PropertyDescriptor = {\r\n    get: (): any => {\r\n        return global[CONTENT_STORAGE];\r\n    }\r\n};\r\n\r\nObject.defineProperty(singleton, 'instance', descriptor);\r\n\r\nObject.freeze(singleton);\r\n\r\nlet cs = singleton.instance.contentStorage;\r\nexport {cs as ContentStorage}"],"sourceRoot":"/source/"}