{"version":3,"sources":["services/binaryprovider.ts"],"names":[],"mappings":"AAAA;;;EAGE;;AAEF,MAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AAGnC;IACI,OAAO,aAAa,CAAC,GAAW,EAAE,QAAgC;QAC9D,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE;YACT,QAAQ,EAAE,IAAI;SACjB,EAAE,CAAC,GAAU,EAAE,IAAqB,EAAE,IAAY;YACnD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACP,QAAQ,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,QAAQ,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;AACL,CAAC;AAZY,sBAAc,iBAY1B,CAAA","file":"services/binaryprovider.js","sourcesContent":["/**\r\n* Simple request wrapper for obtaining of binary streams (pictures)\r\n*\r\n*/\r\n\r\nimport * as request from 'request';\r\nimport {IncomingMessage} from 'http';\r\n\r\nexport class BinaryProvider {\r\n    static GETBINARYDATA(url: string, callback: (buff: Buffer) => void) : void {\r\n        request.get(url, {\r\n                encoding: null\r\n            }, (err: Error, resp: IncomingMessage, data: Buffer) => {\r\n            if (!err) {\r\n                callback(data);\r\n            } else {\r\n                callback(null);\r\n            }\r\n        });\r\n    }\r\n}"],"sourceRoot":"/source/"}