{"version":3,"sources":["services/newsprovider.ts"],"names":[],"mappings":"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","file":"services/newsprovider.js","sourcesContent":["/**\r\n* Rss news list provider\r\n*/\r\n\r\nimport * as si from '../shared/interfaces';\r\nimport * as request from 'request';\r\nimport {ContentStorage} from './contentstorage';\r\nimport * as rssParser from './rssparser';\r\nimport * as iconv from 'iconv';\r\nimport {IncomingMessage} from 'http';\r\n\r\nexport class NewsProvider {\r\n\r\n    private PAGESIZE = 10;\r\n    private cs = ContentStorage;\r\n    getNews(sources: si.IRSSSource[], page: number, refresh: boolean, callBack: (newsFeed: si.INewsHeader[], totalCount: number) => void):\r\n        void {\r\n\r\n        let feed: Map<si.IRSSSource, {\r\n            sourceFeed: si.INewsHeader[],\r\n            isLoaded: boolean,\r\n        }> = new Map();\r\n        sources.forEach(src => feed.set(src, {\r\n            sourceFeed: [],\r\n            isLoaded: false\r\n        }));\r\n        let encoder = new iconv.Iconv('cp1251', 'utf8');\r\n        if (!refresh) {\r\n            let finalFeed: si.INewsHeader[] = [];\r\n            for (let src of sources) {\r\n                let feed = this.cs.getArticlesBySource(src).map((article) => { return article.header; });\r\n                for (let header of feed) {\r\n                    finalFeed.push(header);\r\n                }\r\n            }\r\n            let headers = finalFeed.sort(this.sorter);\r\n            callBack(headers.slice((page - 1) * this.PAGESIZE, page * this.PAGESIZE), finalFeed.length);\r\n            return;\r\n        }\r\n        this.cs.clear();\r\n\r\n        for (let source of sources) {\r\n            let result: si.INewsHeader[] = [];\r\n            request(source.url, {\r\n                    encoding: null\r\n                },\r\n                (err: Error, resp: IncomingMessage, data: Buffer) => {\r\n                    let rssData = data;\r\n                    if (source.name === 'VZ.ru') {\r\n                        rssData = encoder.convert(data);\r\n                    }\r\n\r\n                    let parser = new rssParser.RssParser((headers: si.INewsHeader[]) => {\r\n                    for (let header of headers) {\r\n                        header.source = source.name;\r\n                        let body: si.IBodyContainer = {\r\n                            body: '',\r\n                            hasPicture: header.hasEnclosure\r\n                        };\r\n                        let article: si.IArticleContainer = {\r\n                            uuid: header.uuid,\r\n                            rssSource: source,\r\n                            header: header,\r\n                            body: body\r\n                        };\r\n                        this.cs.saveArticle(article);\r\n                        result.push(header);\r\n                    }\r\n                    feed.set(source, {\r\n                            sourceFeed: result,\r\n                            isLoaded: true\r\n                        });\r\n                });\r\n                parser.parse(rssData.toString(), source);\r\n\r\n                let isCompleted = true;\r\n                let finalFeed: si.INewsHeader[] = [];\r\n                for (let src of feed) {\r\n                    let sourceFeed = src['1'];\r\n                    if (!sourceFeed.isLoaded) {\r\n                        isCompleted = false;\r\n                    } else {\r\n                        for (let header of sourceFeed.sourceFeed) {\r\n                            finalFeed.push(header);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (isCompleted) {\r\n                    finalFeed = finalFeed.sort(this.sorter);\r\n                    let sliced = finalFeed.slice(0, this.PAGESIZE);\r\n                    let totalCount = finalFeed.length;\r\n                    callBack(sliced, totalCount);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private sorter(h1: si.INewsHeader, h2: si.INewsHeader): number {\r\n        if (h1.publishDate < h2.publishDate) {\r\n            return 1;\r\n        } else if (h1.publishDate > h2.publishDate) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport default NewsProvider;"],"sourceRoot":"/source/"}