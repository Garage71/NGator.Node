{"version":3,"sources":["services/newsprovider.ts"],"names":[],"mappings":"AACA;;EAEE;;AAGF,MAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,MAAY,cAAc,WAAM,kBAAkB,CAAC,CAAA;AACnD,MAAY,SAAS,WAAM,aAAa,CAAC,CAAA;AAEzC;IAAA;QACY,OAAE,GAAG,IAAI,cAAc,CAAC,cAAc,EAAE,CAAC;IAuFrD,CAAC;IArFG,OAAO,CAAC,OAAwB,EAAE,IAAY,EAAE,OAAgB,EAAE,QAA8C;QAE5G,IAAI,IAAI,GAGH,IAAI,GAAG,EAAE,CAAC;QACf,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;YACjC,UAAU,EAAE,EAAE;YACd,QAAQ,EAAE,KAAK;SAClB,CAAC,CAAC,CAAC;QACJ;;;;;;;;UAQE;QAEF,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC;YACzB,IAAI,MAAM,GAAqB,EAAE,CAAC;YAClC,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,EAC5B,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI;gBACZ,IAAI,MAAM,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC,OAAyB;oBAC3D,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC;wBACzB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;wBAC5B,IAAI,IAAI,GAAsB;4BAC1B,IAAI,EAAE,EAAE;4BACR,UAAU,EAAE,MAAM,CAAC,YAAY;yBAClC,CAAC;wBACF,IAAI,OAAO,GAAyB;4BAChC,IAAI,EAAE,MAAM,CAAC,IAAI;4BACjB,SAAS,EAAE,MAAM;4BACjB,MAAM,EAAE,MAAM;4BACd,IAAI,EAAE,IAAI;yBACb,CAAC;wBACF,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;wBAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACxB,CAAC;oBACD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;wBACT,UAAU,EAAE,MAAM;wBAClB,QAAQ,EAAE,IAAI;qBACjB,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAEnB,IAAI,WAAW,GAAG,IAAI,CAAC;gBACvB,IAAI,SAAS,GAAqB,EAAE,CAAC;gBACrC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;oBACnB,IAAI,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;oBAC1B,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACvB,WAAW,GAAG,KAAK,CAAC;oBACxB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;4BACvC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBAC3B,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;oBACd,QAAQ,CAAC,SAAS,CAAC,CAAC;gBACxB,CAAC;YACL,CAAC,CAAC,CAAC;QAoBP,CAAC;QAAA,CAAC;IACN,CAAC;AACL,CAAC;AAxFY,oBAAY,eAwFxB,CAAA;AAED;kBAAe,YAAY,CAAC","file":"services/newsprovider.js","sourcesContent":["\r\n/**\r\n* Rss news list provider\r\n*/\r\n\r\nimport * as si from '../shared/interfaces';\r\nimport * as request from 'request';\r\nimport * as contentStorage from './contentstorage';\r\nimport * as rssParser from './rssparser';\r\n\r\nexport class NewsProvider {\r\n    private cs = new contentStorage.ContentStorage();\r\n\r\n    getNews(sources: si.IRSSSource[], page: number, refresh: boolean, callBack: (newsFeed: si.INewsHeader[]) => void):\r\n    void {\r\n        let feed: Map<si.IRSSSource, {\r\n            sourceFeed: si.INewsHeader[],\r\n            isLoaded: boolean,\r\n        }> = new Map();\r\n        sources.forEach(src => feed.set(src, {\r\n            sourceFeed: [],\r\n            isLoaded: false\r\n        }));\r\n        /*\r\n        if (!refresh) {            \r\n            for (let src of sources) {\r\n                let headers = this.cs.getArticlesBySource(src).map(article => article.header);\r\n                headers.forEach(header => result.push(header));\r\n                return result;\r\n            }\r\n        }\r\n        */\r\n\r\n        for (let source of sources) {\r\n            let result: si.INewsHeader[] = [];\r\n            let req = request(source.url,\r\n            (err, resp, data) => {                \r\n                let parser = new rssParser.RssParser((headers: si.INewsHeader[]) => {\r\n                    for (let header of headers) {\r\n                        header.source = source.name;\r\n                        let body: si.IBodyContainer = {\r\n                            body: '',\r\n                            hasPicture: header.hasEnclosure\r\n                        };\r\n                        let article: si.IArticleContainer = {\r\n                            uuid: header.uuid,\r\n                            rssSource: source,\r\n                            header: header,\r\n                            body: body\r\n                        };\r\n                        this.cs.saveArticle(article);\r\n                        result.push(header);\r\n                    }\r\n                    feed.set(source, {\r\n                            sourceFeed: result,\r\n                            isLoaded: true\r\n                        });\r\n                });\r\n                parser.parse(data);\r\n\r\n                let isCompleted = true;\r\n                let finalFeed: si.INewsHeader[] = [];\r\n                for (let src of feed) {\r\n                    let sourceFeed = src['1'];\r\n                    if (!sourceFeed.isLoaded) {\r\n                        isCompleted = false;\r\n                    } else {\r\n                        for (let header of sourceFeed.sourceFeed) {\r\n                            finalFeed.push(header);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (isCompleted) {\r\n                    callBack(finalFeed);\r\n                }\r\n            });\r\n\r\n            /*\r\n            if (!source.picture) {\r\n                if (meta.image && meta.image.url) {\r\n                    let imageUrl: string = meta.image.url;\r\n                    if (!imageUrl.includes('http')) {\r\n                        imageUrl = 'http:' + imageUrl;\r\n                    }\r\n                    let picreq = request(imageUrl);\r\n                    \r\n                    picreq.on('data', (data: Buffer) => {\r\n                        source.picture = data;                            \r\n                    });\r\n                    picreq.on('error', (err) => {\r\n                        console.log('PicReq Error: ' + err);\r\n                    });\r\n                }\r\n            }\r\n            */            \r\n        };\r\n    }\r\n}\r\n\r\nexport default NewsProvider;"],"sourceRoot":"/source/"}