{"version":3,"sources":["services/newsprovider.ts"],"names":[],"mappings":"AACA;;EAEE;;AAKF,MAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAI,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACvC,MAAY,IAAI,WAAM,WAAW,CAAC,CAAA;AAClC,MAAY,cAAc,WAAM,kBAAkB,CAAC,CAAA;AAEnD;IAAA;QACY,mBAAc,GAAG,IAAI,cAAc,CAAC,cAAc,EAAE,CAAC;IAqDjE,CAAC;IApDG,OAAO,CAAC,OAAwB,EAAE,IAAY,EAAE,OAAgB;QAC5D,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAC9B,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC;YACzB,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC9B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAU;gBAC1B,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,KAAK,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE;gBAClB,IAAI,MAAM,GAAG,MAAM,CAAC;gBACpB,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;gBACvB,IAAI,IAAS,CAAC;gBACd,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,OAAO,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC;oBAC1B,IAAI,UAAU,GAAmB;wBAC7B,MAAM,EAAE,IAAI,CAAC,MAAM;wBACnB,WAAW,EAAE,IAAI,CAAC,WAAW;wBAC7B,SAAS,EAAE,IAAI,CAAC,SAAS;wBACzB,YAAY,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,KAAK;wBAC3C,OAAO,EAAE,KAAK;wBACd,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,WAAW,EAAE,IAAI,CAAC,WAAW;wBAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;qBAClB,CAAC;oBAEF,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBAC5B,CAAC;YACL,CAAC,CAAC,CAAC;YACH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG;gBAChB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;YACH,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,QAA8B;gBAE9C,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;oBAC9B,OAAO,CAAC,GAAG,CAAC,6CAA6C,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;oBAChF,MAAM,CAAC;gBACX,CAAC;gBACD,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QAYP,CAAC;QAAA,CAAC;IACN,CAAC;AACL,CAAC;AAtDY,oBAAY,eAsDxB,CAAA;AAED;kBAAe,YAAY,CAAC","file":"services/newsprovider.js","sourcesContent":["\r\n/**\r\n* Rss news list provider\r\n*/\r\n\r\nimport * as http from 'http';\r\nimport * as https from 'https';\r\nimport * as si from '../shared/interfaces';\r\nimport * as request from 'request';\r\nlet feedParser = require('feedparser');\r\nimport * as UUID from 'node-uuid';\r\nimport * as contentStorage from './contentstorage';\r\n\r\nexport class NewsProvider {\r\n    private contentStorage = new contentStorage.ContentStorage();\r\n    getNews(sources: si.IRSSSource[], page: number, refresh: boolean): void {\r\n        let parser = new feedParser();\r\n        for (let source of sources) {\r\n            let req = request(source.url);            \r\n            parser.on('error', (error: any)  => {\r\n                console.log('FeedParser error: ' + error);\r\n            });\r\n            parser.on('readable', () => {\r\n                let stream = parser;\r\n                let meta = stream.meta;\r\n                let item: any;\r\n                console.log(meta);\r\n                while (item = stream.read()) {\r\n                    let newsHeader: si.INewsHeader = {\r\n                        source: item.source,\r\n                        description: item.description,\r\n                        enclosure: item.enclosure,\r\n                        hasEnclosure: item.enclosure ? true : false,\r\n                        hasLogo: false,\r\n                        link: item.link,\r\n                        publishDate: item.publishDate,\r\n                        title: item.title,\r\n                        guid: UUID.v4()\r\n                    };\r\n\r\n                    console.log(newsHeader);                    \r\n                }\r\n            });\r\n            req.on('error', (err) => {\r\n                console.log(err);\r\n            });\r\n            req.on('response', (response: http.IncomingMessage) => {\r\n\r\n                if (response.statusCode !== 200) {\r\n                    console.log(`RSS Server responded invalid status code: ${response.statusCode}`);\r\n                    return;\r\n                }\r\n                response.pipe(parser);\r\n            });\r\n            \r\n            /*\r\n            request.get(source.url, (error:any, response: http.IncomingMessage, body: any) => {\r\n                if (!error && response.statusCode === 200) {\r\n                    console.log(body); // Show the HTML for the Google homepage.\r\n\r\n                } else {\r\n                    console.log(error);\r\n                }\r\n            });\r\n            */\r\n        };\r\n    }\r\n}\r\n\r\nexport default NewsProvider;"],"sourceRoot":"/source/"}