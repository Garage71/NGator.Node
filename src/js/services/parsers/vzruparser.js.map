{"version":3,"sources":["services/parsers/vzruparser.ts"],"names":[],"mappings":";AACA,iCAA6B,kBAAkB,CAAC,CAAA;AAGhD,yBAAgC,+BAAc;IAG1C,YAAoB,EAA4C,EAAU,SAAS,GAAG,EAAE;QACpF,MAAM,EAAE,EAAE,SAAS,CAAC,CAAC;QADL,OAAE,GAAF,EAAE,CAA0C;QAAU,cAAS,GAAT,SAAS,CAAK;QADhF,WAAM,GAAG,KAAK,CAAC;IAGvB,CAAC;IACS,SAAS,CAAC,GAAG;QACnB,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;gBACjB,IAAI,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACnC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC3C,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;gBACvB,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAES,UAAU,CAAC,OAAO,EAAE,UAAU;QACpC,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,IAAI,UAAU,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACnD,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YACxD,IAAI,WAAW,GAAG,EAAE,CAAC;YACrB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC;gBACvB,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC3B,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC5B,WAAW,GAAG,WAAW,GAAG,GAAG,GAAG,KAAK,CAAC;oBAC5C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAC/B,WAAW,GAAG,WAAW,GAAG,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;wBACxD,CAAC;oBACL,CAAC;gBACL,CAAC;YACL,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,EAAE,CAAC;oBACJ,IAAI,EAAE,WAAW;oBACjB,UAAU,EAAE,KAAK;iBACpB,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACvB,CAAC;QACL,CAAC;IACL,CAAC;AACL,CAAC;AAzCY,kBAAU,aAyCtB,CAAA","file":"services/parsers/vzruparser.js","sourcesContent":["\r\nimport {AbstractParser} from './abstractparser';\r\nimport * as si from '../../shared/interfaces';\r\n\r\nexport class VzRuParser extends AbstractParser {\r\n\r\n    private cbSent = false;\r\n    constructor(private cb: (articleBody: si.IBodyContainer) => void, private articleId = '') {\r\n        super(cb, articleId);\r\n    }\r\n    protected onopentag(tag) {\r\n        if (tag.name === 'div') {\r\n            if (tag.attributes) {\r\n                let attr = tag.attributes['class'];\r\n                if (attr && attr.toString().includes('text')) {\r\n                    this.article = tag;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onclosetag(tagname, currentTag) {\r\n        if (tagname === 'div' && currentTag === this.article) {\r\n            let paragraphs = this.childrenByName(this.article, 'p');\r\n            let articleText = '';\r\n            for (let p of paragraphs) {\r\n                for (let child of p.children) {\r\n                    if (typeof child === 'string') {\r\n                        articleText = articleText + ' ' + child;\r\n                    } else {\r\n                        if (child.children[0].length > 0) {\r\n                            articleText = articleText + ' ' + child.children[0];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!this.cbSent) {\r\n                this.cb({\r\n                    body: articleText,\r\n                    hasPicture: false\r\n                });\r\n                this.cbSent = true;\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}