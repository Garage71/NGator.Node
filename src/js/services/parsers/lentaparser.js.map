{"version":3,"sources":["services/parsers/lentaparser.ts"],"names":[],"mappings":";AACA,iCAA6B,kBAAkB,CAAC,CAAA;AAIhD,0BAAiC,+BAAc;IAE3C,YAAoB,EAA4C;QAC5D,MAAM,EAAE,CAAC,CAAC;QADM,OAAE,GAAF,EAAE,CAA0C;IAEhE,CAAC;IAEU,SAAS,CAAC,GAAG;QACpB,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;gBACjB,IAAI,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;gBACtC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBAClD,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;gBACvB,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAES,UAAU,CAAC,OAAO,EAAE,UAAU;QACpC,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,IAAI,UAAU,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACnD,IAAI,WAAW,GAAG,EAAE,CAAC;YACrB,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YACxD,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC;gBACvB,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC3B,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC5B,WAAW,GAAG,WAAW,GAAG,GAAG,GAAG,KAAK,CAAC;oBAC5C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,WAAW,GAAG,WAAW,GAAG,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACxD,CAAC;gBACL,CAAC;YACL,CAAC;YACD,IAAI,CAAC,EAAE,CAAC;gBACJ,IAAI,EAAE,WAAW;gBACjB,UAAU,EAAE,IAAI;aACnB,CAAC,CAAC;QACP,CAAC;IACL,CAAC;AACL,CAAC;AApCY,mBAAW,cAoCvB,CAAA","file":"services/parsers/lentaparser.js","sourcesContent":["\r\nimport {AbstractParser} from './abstractparser';\r\nimport * as si from '../../shared/interfaces';\r\nimport * as sax from 'sax';\r\n\r\nexport class LentaParser extends AbstractParser {\r\n\r\n    constructor(private cb: (articleBody: si.IBodyContainer) => void) {\r\n        super(cb);        \r\n    }\r\n    \r\n    protected  onopentag(tag) {\r\n        if (tag.name === 'div') {\r\n            if (tag.attributes) {\r\n                let attr = tag.attributes['itemprop'];\r\n                if (attr && attr.toString().includes('articleBody')) {\r\n                    this.article = tag;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onclosetag(tagname, currentTag) {\r\n        if (tagname === 'div' && currentTag === this.article) {\r\n            let articleText = '';\r\n            let paragraphs = this.childrenByName(this.article, 'p');\r\n            for (let p of paragraphs) {\r\n                for (let child of p.children) {\r\n                    if (typeof child === 'string') {\r\n                        articleText = articleText + ' ' + child;\r\n                    } else {\r\n                        articleText = articleText + ' ' + child.children[0];\r\n                    }\r\n                }\r\n            }\r\n            this.cb({\r\n                body: articleText,\r\n                hasPicture: true\r\n            });\r\n        }\r\n    }\r\n} "],"sourceRoot":"/source/"}